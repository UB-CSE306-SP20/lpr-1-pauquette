#!/bin/bash

compiler=$1
cfile=$2
mkfile=$3

# Handle improper number of arguments

if [ $# -gt 3 ]; then
    echo -e "\nERROR: Too many arguments\n\nProper Usage:\n\tmakeMake compiler executable makefile\n\tmakeMake compiler executable\n\tmakeMake compiler\n\tmakeMake"
    exit -1
elif [ $# = 2 ]; then
    read -p "Enter the desired name of your makefile: " mkfile
elif [ $# = 1 ]; then
    read -p "Enter the name (without extension) of the C source file from which the executable is being produced: " cfile
    read -p "Enter the desired name of your makefile: " mkfile
elif [ $# = 0 ]; then
    read -p "Enter the name of compiler to use: " compiler
    read -p "Enter the name (without extension) of the C source file from which the executable is being produced: " cfile
    read -p "Enter the desired name of your makefile: " mkfile
fi

rm -f $mkfile

touch $mkfile
objects=$(gcc -MM ${cfile}.c)
objects=${objects#*${cfile}.c }
objects=${objects//.h/.o}
objects=${objects//.c/.o}
date=$(zdump EST)
date=${date#*EST  }  
echo -e "# Makefile automatically generated by makeMake, v1.0, on ${date}\n" >> $mkfile
echo -e "# Variables used by makefile\n\nCC=${compiler}\nCFLAGS=-Wall -std=c11\nEXE=${cfile}\nOBJECTS=${objects}\n" >> $mkfile
echo -e "# Recipies for targets\n" >> $mkfile

for i in $objects; do
    i=${i//.o/.c}
    echo -e "$(gcc -MM ${i})\n\t\$(CC) \$(CFLAGS) -c ${i}\n" >> $mkfile
done

echo -e "${cfile}: \$(OBJECTS)\n\t\$(CC) -o \$(EXE) \$(OBJECTS) \$(EXE).c\n\n# PHONY targets\n\n.PHONY: clean\nclean:\n\trm -rf *~ \$(OBJECTS) \$(EXE)\n\n# End of makefile" >> $mkfile